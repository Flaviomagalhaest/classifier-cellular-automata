from sklearn.calibration import CalibratedClassifierCV
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis, LinearDiscriminantAnalysis
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier, GradientBoostingClassifier,BaggingClassifier
from sklearn.gaussian_process import GaussianProcessClassifier
from sklearn.gaussian_process.kernels import RBF
from sklearn.linear_model import LogisticRegression, SGDClassifier, RidgeClassifier, PassiveAggressiveClassifier, RidgeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC, NuSVC, LinearSVC
from sklearn.tree import DecisionTreeClassifier

class Classifiers:
   def getCalibrationClassifierCV(self, names=[], classifiers=[]):
      names.append("calibrated_3_sigmoid")
      names.append("calibrated_5_sigmoid")
      names.append("calibrated_7_sigmoid")
      names.append("calibrated_9_sigmoid")
      names.append("calibrated_12_sigmoid")
      names.append("calibrated_15_sigmoid")
      names.append("calibrated_18_sigmoid")
      names.append("calibrated_21_sigmoid")
      names.append("calibrated_24_sigmoid")
      names.append("calibrated_27_sigmoid")
      names.append("calibrated_30_sigmoid")
      names.append("calibrated_33_sigmoid")
      names.append("calibrated_3_sigmoid_ensemble")
      names.append("calibrated_5_sigmoid_ensemble")
      names.append("calibrated_7_sigmoid_ensemble")
      names.append("calibrated_9_sigmoid_ensemble")
      names.append("calibrated_12_sigmoid_ensemble")
      names.append("calibrated_15_sigmoid_ensemble")
      names.append("calibrated_18_sigmoid_ensemble")
      names.append("calibrated_21_sigmoid_ensemble")
      names.append("calibrated_24_sigmoid_ensemble")
      names.append("calibrated_27_sigmoid_ensemble")
      names.append("calibrated_30_sigmoid_ensemble")
      names.append("calibrated_33_sigmoid_ensemble")
      names.append("calibrated_3_isotonic")
      names.append("calibrated_5_isotonic")
      names.append("calibrated_7_isotonic")
      names.append("calibrated_9_isotonic")
      names.append("calibrated_12_isotonic")
      names.append("calibrated_15_isotonic")
      names.append("calibrated_18_isotonic")
      names.append("calibrated_21_isotonic")
      names.append("calibrated_24_isotonic")
      names.append("calibrated_27_isotonic")
      names.append("calibrated_30_isotonic")
      names.append("calibrated_33_isotonic")
      names.append("calibrated_3_isotonic_ensemble")
      names.append("calibrated_5_isotonic_ensemble")
      names.append("calibrated_7_isotonic_ensemble")
      names.append("calibrated_9_isotonic_ensemble")
      names.append("calibrated_12_isotonic_ensemble")
      names.append("calibrated_15_isotonic_ensemble")
      names.append("calibrated_18_isotonic_ensemble")
      names.append("calibrated_21_isotonic_ensemble")
      names.append("calibrated_24_isotonic_ensemble")
      names.append("calibrated_27_isotonic_ensemble")
      names.append("calibrated_30_isotonic_ensemble")
      names.append("calibrated_33_isotonic_ensemble")

      classifiers.append(CalibratedClassifierCV(cv=3, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=5, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=7, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=9, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=12, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=15, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=18, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=21, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=24, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=27, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=30, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=33, method='sigmoid'))
      classifiers.append(CalibratedClassifierCV(cv=3, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=5, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=7, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=9, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=12, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=15, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=18, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=21, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=24, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=27, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=30, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=33, method='sigmoid', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=3, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=5, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=7, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=9, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=12, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=15, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=18, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=21, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=24, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=27, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=30, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=33, method='isotonic'))
      classifiers.append(CalibratedClassifierCV(cv=3, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=5, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=7, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=9, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=12, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=15, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=18, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=21, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=24, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=27, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=30, method='isotonic', ensemble=False))
      classifiers.append(CalibratedClassifierCV(cv=33, method='isotonic', ensemble=False))
      return names, classifiers
   
   def getDiscriminantAnalysis(self, names=[], classifiers=[]):
      names.append("QDA")
      names.append("LDA")
      classifiers.append(QuadraticDiscriminantAnalysis())
      classifiers.append(LinearDiscriminantAnalysis())
      return names, classifiers

   def getEnsemble(self, names=[], classifiers=[]):
      names.append("Random_Forest_12_100")
      names.append("Random_Forest_15_100")
      names.append("Random_Forest_5_300")
      names.append("Random_Forest_7_300")
      names.append("Extra_Trees_10_2")
      names.append("Extra_Trees_30_2")
      names.append("Extra_Trees_10_4")
      names.append("Gradient_Boosting")
      classifiers.append(RandomForestClassifier(max_depth=12, n_estimators=100))
      classifiers.append(RandomForestClassifier(max_depth=15, n_estimators=100))
      classifiers.append(RandomForestClassifier(max_depth=5, n_estimators=300))
      classifiers.append(RandomForestClassifier(max_depth=7, n_estimators=300))
      classifiers.append(ExtraTreesClassifier(n_estimators=10, min_samples_split=2))
      classifiers.append(ExtraTreesClassifier(n_estimators=30, min_samples_split=2))
      classifiers.append(ExtraTreesClassifier(n_estimators=10, min_samples_split=4))
      classifiers.append(GradientBoostingClassifier(n_estimators=100, learning_rate=1.0))
      return names, classifiers

   def getEnsembleRandomForest(self, names=[], classifiers=[]):
      names.append("RandomForest")
      names.append("RandomForest_50")
      names.append("RandomForest_500")
      names.append("RandomForest_entropy")
      names.append("RandomForest_50_entropy")
      names.append("RandomForest_500_entropy")
      names.append("RandomForest_split5")
      names.append("RandomForest_50_split'5")
      names.append("RandomForest_500_split5")
      names.append("RandomForest_entropy_split5")
      names.append("RandomForest_50_entropy_split5")
      names.append("RandomForest_500_entropy_split5")
      names.append("RandomForest,bootstrap")
      names.append("RandomForest_50,bootstrap")
      names.append("RandomForest_500,bootstrap")
      names.append("RandomForest_entropy,bootstrap")
      names.append("RandomForest_50_entropy,bootstrap")
      names.append("RandomForest_500_entropy,bootstrap")
      names.append("RandomForest_split5,bootstrap")
      names.append("RandomForest_50_split'5,bootstrap")
      names.append("RandomForest_500_split5,bootstrap")
      names.append("RandomForest_entropy_split5,bootstrap")
      names.append("RandomForest_50_entropy_split5,bootstrap")
      names.append("RandomForest_500_entropy_split5,bootstrap")
      classifiers.append(RandomForestClassifier())
      classifiers.append(RandomForestClassifier(n_estimators=50))
      classifiers.append(RandomForestClassifier(n_estimators=500))
      classifiers.append(RandomForestClassifier(criterion='entropy'))
      classifiers.append(RandomForestClassifier(n_estimators=50,criterion='entropy'))
      classifiers.append(RandomForestClassifier(n_estimators=500,criterion='entropy'))
      classifiers.append(RandomForestClassifier(min_samples_split=5))
      classifiers.append(RandomForestClassifier(n_estimators=50,min_samples_split=5))
      classifiers.append(RandomForestClassifier(n_estimators=500,min_samples_split=5))
      classifiers.append(RandomForestClassifier(criterion='entropy',min_samples_split=5))
      classifiers.append(RandomForestClassifier(n_estimators=50,criterion='entropy',min_samples_split=5))
      classifiers.append(RandomForestClassifier(n_estimators=500,criterion='entropy',min_samples_split=5))
      classifiers.append(RandomForestClassifier(bootstrap=False))
      classifiers.append(RandomForestClassifier(n_estimators=50,bootstrap=False))
      classifiers.append(RandomForestClassifier(n_estimators=500,bootstrap=False))
      classifiers.append(RandomForestClassifier(criterion='entropy',bootstrap=False))
      classifiers.append(RandomForestClassifier(n_estimators=50,criterion='entropy',bootstrap=False))
      classifiers.append(RandomForestClassifier(n_estimators=500,criterion='entropy',bootstrap=False))
      classifiers.append(RandomForestClassifier(min_samples_split=5,bootstrap=False))
      classifiers.append(RandomForestClassifier(n_estimators=50,min_samples_split=5,bootstrap=False))
      classifiers.append(RandomForestClassifier(n_estimators=500,min_samples_split=5,bootstrap=False))
      classifiers.append(RandomForestClassifier(criterion='entropy',min_samples_split=5,bootstrap=False))
      classifiers.append(RandomForestClassifier(n_estimators=50,criterion='entropy',min_samples_split=5,bootstrap=False))
      classifiers.append(RandomForestClassifier(n_estimators=500,criterion='entropy',min_samples_split=5,bootstrap=False))
      return names, classifiers

   def getEnsembleAdaboost(self, names=[], classifiers=[], ensembleFlag=True):
      if ensembleFlag:
         names.append("Adaboost_50")
         names.append("Adaboost_500")
         names.append("Adaboost_1000")
         names.append("Adaboost_50_0.1")
         names.append("Adaboost_500_0.1")
         names.append("Adaboost_1000_0.1")
         names.append("Adaboost_50_0.5")
         names.append("Adaboost_500_0.5")
         names.append("Adaboost_1000_0.5")
         names.append("Adaboost_50_randomState")
         names.append("Adaboost_500_randomState")
         names.append("Adaboost_1000_randomState")
         names.append("Adaboost_50_0.1_randomState")
         names.append("Adaboost_500_0.1_randomState")
         names.append("Adaboost_1000_0.1_randomState")
         names.append("Adaboost_50_0.5_randomState")
         names.append("Adaboost_500_0.5_randomState")
         names.append("Adaboost_1000_0.5_randomState")
         classifiers.append(AdaBoostClassifier(n_estimators=50))
         classifiers.append(AdaBoostClassifier(n_estimators=500))
         classifiers.append(AdaBoostClassifier(n_estimators=1000))
         classifiers.append(AdaBoostClassifier(n_estimators=50, learning_rate=0.1))
         classifiers.append(AdaBoostClassifier(n_estimators=500, learning_rate=0.1))
         classifiers.append(AdaBoostClassifier(n_estimators=1000, learning_rate=0.1))
         classifiers.append(AdaBoostClassifier(n_estimators=50, learning_rate=0.5))
         classifiers.append(AdaBoostClassifier(n_estimators=500, learning_rate=0.5))
         classifiers.append(AdaBoostClassifier(n_estimators=1000, learning_rate=0.5))
         classifiers.append(AdaBoostClassifier(n_estimators=50, random_state=1))
         classifiers.append(AdaBoostClassifier(n_estimators=500, random_state=1))
         classifiers.append(AdaBoostClassifier(n_estimators=1000, random_state=1))
         classifiers.append(AdaBoostClassifier(n_estimators=50, learning_rate=0.1, random_state=1))
         classifiers.append(AdaBoostClassifier(n_estimators=500, learning_rate=0.1, random_state=1))
         classifiers.append(AdaBoostClassifier(n_estimators=1000, learning_rate=0.1, random_state=1))
         classifiers.append(AdaBoostClassifier(n_estimators=50, learning_rate=0.5, random_state=1))
         classifiers.append(AdaBoostClassifier(n_estimators=500, learning_rate=0.5, random_state=1))
         classifiers.append(AdaBoostClassifier(n_estimators=1000, learning_rate=0.5, random_state=1))
      else:
         names.append("Adaboost_50")
         classifiers.append(AdaBoostClassifier(n_estimators=50))
      return names, classifiers

   def getEnsembleBagging(self, names=[], classifiers=[]):
      names.append("Bagging")
      names.append("Bagging_50")
      names.append("Bagging_250")
      names.append("Bagging_500")
      names.append("Bagging_maxsamples-0.1")
      names.append("Bagging_50_maxsamples-0.1")
      names.append("Bagging_250_maxsamples-0.1")
      names.append("Bagging_500_maxsamples-0.1")
      names.append("Bagging_bootstrap")
      names.append("Bagging_50_bootstrap")
      names.append("Bagging_250_bootstrap")
      names.append("Bagging_500_bootstrap")
      names.append("Bagging_maxsamples-0.1_bootstrap")
      names.append("Bagging_50_maxsamples-0.1_bootstrap")
      names.append("Bagging_250_maxsamples-0.1_bootstrap")
      names.append("Bagging_500_maxsamples-0.1_bootstrap")
      names.append("Bagging_bootstrap-features")
      names.append("Bagging_50_bootstrap-features")
      names.append("Bagging_250_bootstrap-features")
      names.append("Bagging_500_bootstrap-features")
      names.append("Bagging_maxsamples-0.1_bootstrap-features")
      names.append("Bagging_50_maxsamples-0.1_bootstrap-features")
      names.append("Bagging_250_maxsamples-0.1_bootstrap-features")
      names.append("Bagging_500_maxsamples-0.1_bootstrap-features")
      names.append("Bagging_bootstrap_bootstrap-features")
      names.append("Bagging_50_bootstrap_bootstrap-features")
      names.append("Bagging_250_bootstrap_bootstrap-features")
      names.append("Bagging_500_bootstrap_bootstrap-features")
      names.append("Bagging_maxsamples-0.1_bootstrap_bootstrap-features")
      names.append("Bagging_50_maxsamples-0.1_bootstrap_bootstrap-features")
      names.append("Bagging_250_maxsamples-0.1_bootstrap_bootstrap-features")
      names.append("Bagging_500_maxsamples-0.1_bootstrap_bootstrap-features")
      classifiers.append(BaggingClassifier())
      classifiers.append(BaggingClassifier(n_estimators=50))
      classifiers.append(BaggingClassifier(n_estimators=250))
      classifiers.append(BaggingClassifier(n_estimators=500))
      classifiers.append(BaggingClassifier(max_samples=0.1))
      classifiers.append(BaggingClassifier(n_estimators=50,max_samples=0.1))
      classifiers.append(BaggingClassifier(n_estimators=250,max_samples=0.1))
      classifiers.append(BaggingClassifier(n_estimators=500,max_samples=0.1))
      classifiers.append(BaggingClassifier(bootstrap=False))
      classifiers.append(BaggingClassifier(n_estimators=50,bootstrap=False))
      classifiers.append(BaggingClassifier(n_estimators=250,bootstrap=False))
      classifiers.append(BaggingClassifier(n_estimators=500,bootstrap=False))
      classifiers.append(BaggingClassifier(max_samples=0.1,bootstrap=False))
      classifiers.append(BaggingClassifier(n_estimators=50,max_samples=0.1,bootstrap=False))
      classifiers.append(BaggingClassifier(n_estimators=250,max_samples=0.1,bootstrap=False))
      classifiers.append(BaggingClassifier(n_estimators=500,max_samples=0.1,bootstrap=False))
      classifiers.append(BaggingClassifier(bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=50,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=250,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=500,bootstrap_features=True))
      classifiers.append(BaggingClassifier(max_samples=0.1,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=50,max_samples=0.1,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=250,max_samples=0.1,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=500,max_samples=0.1,bootstrap_features=True))
      classifiers.append(BaggingClassifier(bootstrap=False,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=50,bootstrap=False,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=250,bootstrap=False,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=500,bootstrap=False,bootstrap_features=True))
      classifiers.append(BaggingClassifier(max_samples=0.1,bootstrap=False,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=50,max_samples=0.1,bootstrap=False,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=250,max_samples=0.1,bootstrap=False,bootstrap_features=True))
      classifiers.append(BaggingClassifier(n_estimators=500,max_samples=0.1,bootstrap=False,bootstrap_features=True))
      return names, classifiers

   def getGaussian(self, names=[], classifiers=[]):
      names.append("Gaussian_Process")
      classifiers.append(GaussianProcessClassifier(1.0 * RBF(1.0)))
      return names, classifiers

   def getSGD(self, names=[], classifiers=[]):
      names.append("SGD_hinge")
      names.append("SGD_log")
      names.append("SGD_modified_huber")
      names.append("SGD_squared_hinge")
      names.append("SGD_perceptron")
      names.append("SGD_huber")
      names.append("SGD_epsilon_insensitive")
      names.append("SGD_squared_loss")

      classifiers.append(SGDClassifier(loss="hinge", penalty="l2"))
      classifiers.append(SGDClassifier(loss="log"))
      classifiers.append(SGDClassifier(loss="modified_huber"))
      classifiers.append(SGDClassifier(loss="squared_hinge"))
      classifiers.append(SGDClassifier(loss="perceptron"))
      classifiers.append(SGDClassifier(loss='huber'))
      classifiers.append(SGDClassifier(loss='epsilon_insensitive'))
      classifiers.append(SGDClassifier(loss="squared_loss"))
      return names, classifiers

   def getPassiveAgressive(self, names=[], classifiers=[]):
      names.append("SGD_PAC_00")
      names.append("SGD_PAC_01")
      names.append("SGD_PAC_02")
      names.append("SGD_PAC_03")
      names.append("SGD_PAC_04")
      names.append("SGD_PAC_05")
      names.append("SGD_PAC_06")
      names.append("SGD_PAC_07")
      names.append("SGD_PAC_08")
      names.append("SGD_PAC_09")
      names.append("SGD_PAC_10")
      names.append("SGD_PAC_11")
      names.append("SGD_PAC_12")
      names.append("SGD_PAC_13")
      names.append("SGD_PAC_14")
      names.append("SGD_PAC_15")
      names.append("SGD_PAC_16")
      names.append("SGD_PAC_17")
      names.append("SGD_PAC_18")
      names.append("SGD_PAC_19")
      names.append("SGD_PAC_20")
      names.append("SGD_PAC_21")
      names.append("SGD_PAC_22")
      names.append("SGD_PAC_23")
      names.append("SGD_PAC_24")
      names.append("SGD_PAC_25")
      names.append("SGD_PAC_26")
      names.append("SGD_PAC_27")
      names.append("SGD_PAC_28")
      names.append("SGD_PAC_29")
      names.append("SGD_PAC_100")
      names.append("SGD_PAC_101")
      names.append("SGD_PAC_102")
      names.append("SGD_PAC_103")
      names.append("SGD_PAC_104")
      names.append("SGD_PAC_105")
      names.append("SGD_PAC_106")
      names.append("SGD_PAC_107")
      names.append("SGD_PAC_108")
      names.append("SGD_PAC_109")
      names.append("SGD_PAC_110")
      names.append("SGD_PAC_111")
      names.append("SGD_PAC_112")
      names.append("SGD_PAC_113")
      names.append("SGD_PAC_114")
      names.append("SGD_PAC_115")
      names.append("SGD_PAC_116")
      names.append("SGD_PAC_117")
      names.append("SGD_PAC_118")
      names.append("SGD_PAC_119")
      names.append("SGD_PAC_120")
      names.append("SGD_PAC_121")
      names.append("SGD_PAC_122")
      names.append("SGD_PAC_123")
      names.append("SGD_PAC_124")
      names.append("SGD_PAC_125")
      names.append("SGD_PAC_126")
      names.append("SGD_PAC_127")
      names.append("SGD_PAC_128")
      names.append("SGD_PAC_129")

      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())
      classifiers.append(PassiveAggressiveClassifier())

      return names, classifiers

   def geRidget(self, names=[], classifiers=[]):
      names.append("Ridget-svd-auto")
      names.append("Ridget-svd-2.5")
      names.append("Ridget-svd-5")
      names.append("Ridget-svd-0.5")
      names.append("Ridget-svd-auto-fit")
      names.append("Ridget-svd-2.5-fit")
      names.append("Ridget-svd-5-fit")
      names.append("Ridget-svd-0.5-fit")
      names.append("Ridget-sparse_cg-auto")
      names.append("Ridget-lsqr-auto")
      names.append("Ridget-sag-auto")
      
      classifiers.append(RidgeClassifier(solver='svd'))
      classifiers.append(RidgeClassifier(alpha=2.5,solver='svd'))
      classifiers.append(RidgeClassifier(alpha=5,solver='svd'))
      classifiers.append(RidgeClassifier(alpha=0.5,solver='svd'))
      classifiers.append(RidgeClassifier(fit_intercept=False,solver='svd'))
      classifiers.append(RidgeClassifier(alpha=2.5,fit_intercept=False,solver='svd'))
      classifiers.append(RidgeClassifier(alpha=5,fit_intercept=False,solver='svd'))
      classifiers.append(RidgeClassifier(alpha=0.5,fit_intercept=False,solver='svd'))
      classifiers.append(RidgeClassifier(solver='sparse_cg'))
      classifiers.append(RidgeClassifier(solver='lsqr'))
      classifiers.append(RidgeClassifier(solver='sag'))
      return names, classifiers

   def getLogisticRegression(self, names=[], classifiers=[]):
      names.append("LogReg_lbfgs_0")
      names.append("LogReg_lbfgs_0.5")
      names.append("LogReg_lbfgs_0.1")
      names.append("LogReg_lbfgs_0.05")
      names.append("LogReg_newton-cg_0")
      names.append("LogReg_newton-cg_0.5")
      names.append("LogReg_newton-cg_0.1")
      names.append("LogReg_newton-cg_0.05")
      names.append("LogReg_newton-cg_0.05-none")
      names.append("LogReg_liblinear_l2_0.5")
      names.append("LogReg_liblinear_l2_0.1")
      names.append("LogReg_liblinear_l2_0.05")
      names.append("LogReg_liblinear_l2_0.05-none")
      names.append("LogReg_liblinear_l1_0.5")
      names.append("LogReg_liblinear_l1_0.1")
      names.append("LogReg_liblinear_l1_0.05")
      names.append("LogReg_liblinear_l1_0.05-none")

      classifiers.append(LogisticRegression(random_state=0))
      classifiers.append(LogisticRegression(C=0.5))
      classifiers.append(LogisticRegression(C=0.1))
      classifiers.append(LogisticRegression(C=0.05))
      classifiers.append(LogisticRegression(solver='newton-cg', random_state=0))
      classifiers.append(LogisticRegression(solver='newton-cg', C=0.5))
      classifiers.append(LogisticRegression(solver='newton-cg', C=0.1))
      classifiers.append(LogisticRegression(solver='newton-cg', C=0.05))
      classifiers.append(LogisticRegression(penalty='none', solver='newton-cg', random_state=0))
      classifiers.append(LogisticRegression(penalty='l2', solver='liblinear', random_state=0))
      classifiers.append(LogisticRegression(penalty='l2', solver='liblinear', C=0.5))
      classifiers.append(LogisticRegression(penalty='l2', solver='liblinear', C=0.1))
      classifiers.append(LogisticRegression(penalty='l2', solver='liblinear', C=0.05))
      classifiers.append(LogisticRegression(penalty='l1', solver='liblinear', random_state=0))
      classifiers.append(LogisticRegression(penalty='l1', solver='liblinear', C=0.5))
      classifiers.append(LogisticRegression(penalty='l1', solver='liblinear', C=0.1))
      classifiers.append(LogisticRegression(penalty='l1', solver='liblinear', C=0.05))
      return names, classifiers

   def getNaiveBayers(self, names=[], classifiers=[]):
      names.append("Naive_Bayes")
      classifiers.append(GaussianNB())
      return names, classifiers

   def getNeuralNetwork(self, names=[], classifiers=[]):
      names.append("Neural_Net")
      classifiers.append(MLPClassifier(alpha=1, max_iter=1000))
      return names, classifiers

   def getNeighbors(self, names=[], classifiers=[]):
      names.append("Nearest_Neighbors_3")
      names.append("Nearest_Neighbors_4")
      names.append("Nearest_Neighbors_5")
      names.append("Nearest_Neighbors_7")
      classifiers.append(KNeighborsClassifier(3))
      classifiers.append(KNeighborsClassifier(4))
      classifiers.append(KNeighborsClassifier(5))
      classifiers.append(KNeighborsClassifier(7))
      return names, classifiers

   def getSVM(self, names=[], classifiers=[]):
      # names.append("Linear_SVM")
      names.append("Polynomial_SVM")
      names.append("RBF_SVM")
      names.append("SIGMOID_SVM")
      names.append("OVO_SVM")
      # names.append("Linear_NuSVC")
      # names.append("Polynomial_NuSVC")
      # names.append("RBF_NuSVC")
      # names.append("SIGMOID_NuSVC")
      # names.append("OVO_NuSVC")
      names.append("LinearSVC")
      names.append("LinearSVC_l2")

      # classifiers.append(SVC(kernel="linear", C=0.025))
      classifiers.append(SVC(kernel="poly", degree=3, C=0.025, probability=True))
      classifiers.append(SVC(kernel="rbf", C=1, gamma=2, probability=True))
      classifiers.append(SVC(kernel='sigmoid', probability=True))
      classifiers.append(SVC(decision_function_shape='ovo', probability=True))
      # classifiers.append(NuSVC(kernel="linear", probability=True))
      # classifiers.append(NuSVC(kernel="poly", degree=3, probability=True))
      # classifiers.append(NuSVC(kernel="rbf",gamma=2, probability=True))
      # classifiers.append(NuSVC(kernel='sigmoid', probability=True))
      # classifiers.append(NuSVC(decision_function_shape='ovo', probability=True))
      classifiers.append(LinearSVC())
      classifiers.append(LinearSVC(penalty='l2', loss='hinge'))
      return names, classifiers
   
   def getTree(self, names=[], classifiers=[]):
      names.append("Decision_Tree_3")
      names.append("Decision_Tree_5")
      classifiers.append(DecisionTreeClassifier(max_depth=3))
      classifiers.append(DecisionTreeClassifier(max_depth=5))
      return names, classifiers

   def getAll(self, ensembleFlag=False, predictProbaFlag=False):
      names = []
      classifiers = []

      if (predictProbaFlag==True):
         names, classifiers = self.getLogisticRegression(names, classifiers)
         names, classifiers = self.getSGD(names, classifiers)
      else:
         names, classifiers = self.getLogisticRegression(names, classifiers)
         names, classifiers = self.getPassiveAgressive(names, classifiers)
         names, classifiers = self.geRidget(names, classifiers)         


         # names, classifiers = self.getCalibrationClassifierCV(names, classifiers)
         names, classifiers = self.getDiscriminantAnalysis(names, classifiers)
         # names, classifiers = self.getGaussian(names, classifiers)
         names, classifiers = self.getSGD(names, classifiers)
         names, classifiers = self.getNaiveBayers(names, classifiers)
         names, classifiers = self.getNeuralNetwork(names, classifiers)
         names, classifiers = self.getNeighbors(names, classifiers)
         names, classifiers = self.getSVM(names, classifiers)
         names, classifiers = self.getTree(names, classifiers)
         names, classifiers = self.getEnsembleAdaboost(names, classifiers, ensembleFlag)

      if ensembleFlag:
         names, classifiers = self.getEnsemble(names, classifiers)
         names, classifiers = self.getEnsembleAdaboost(names, classifiers, ensembleFlag)
         names, classifiers = self.getEnsembleBagging(names, classifiers)
         names, classifiers = self.getEnsembleRandomForest(names, classifiers)

      return names, classifiers